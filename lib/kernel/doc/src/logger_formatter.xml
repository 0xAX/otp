<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2017</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    </legalnotice>

    <title>logger_formatter</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date></date>
    <rev>A</rev>
    <file>logger_formatter.xml</file>
  </header>
  <module>logger_formatter</module>
  <modulesummary>Default formatter for Logger.</modulesummary>

  <description>
    <p>Each log handler has a configured formatter specified as a
      module and a configuration term. The purpose of the formatter is
      to translate the log events to a final printable string
      (<c>unicode:chardata()</c>) which can be written to the output
      device of the handler.</p>
    <p><c>logger_formatter</c> is the default formatter used by
      Logger.</p>
  </description>

  <section>
    <title>Configuration</title>
    <p>The configuration term for <c>logger_formatter</c> is a map,
      and the following keys can be set as configuration
      parameters:</p>
    <taglist>
      <tag><c>chars_limit = pos_integer() | unlimited</c></tag>
      <item>
	<p>A positive integer representing the value of the option
	  with the same name to be used when calling
	  <seealso marker="stdlib:io_lib#format-3">io_lib:format/3</seealso>.
	  This value limits the total number of characters printed
	  for each log event. Notice that this is a soft limit. For a
	  hard truncation limit, see option <c>max_size</c>.</p>
	<p>Default is <c>unlimited</c>.</p>
	<note>
	  <p><c>chars_limit</c> has no effect on log messages on
	    string form. These are expected to be short, but can still
	    be truncated by the <c>max_size</c> parameter.</p>
	</note>
      </item>
      <tag><c>depth = pos_integer() | unlimited</c></tag>
      <item>
	<p>A positive integer representing the maximum depth to
	  which terms shall be printed by this formatter. Format
	  strings passed to this formatter are rewritten. The format
	  controls ~p and ~w are replaced with ~P and ~W,
	  respectively, and the value is used as the depth
	  parameter. For details, see
	  <seealso marker="stdlib:io#format-2">io:format/2,3</seealso>
	  in STDLIB.</p>
	<p>Default is <c>unlimited</c>.</p>
	<note>
	  <p><c>depth</c> has no effect on log messages on string
	    form. These are expected to be short, but can still be
	    truncated by the <c>max_size</c> parameter.</p>
	</note>
      </item>
      <tag><c>max_size = pos_integer() | unlimited</c></tag>
      <item>
	<p>A positive integer representing the absolute maximum size a
	  string returned from this formatter can have. If the
	  formatted string is longer, after possibly being limited
	  by <c>chars_limit</c> or <c>depth</c>, it is truncated.</p>
	<p>Default is <c>unlimited</c>.</p>
      </item>
      <tag><c>single_line = boolean()</c></tag>
      <item>
	<p>If set to <c>true</c>, all newlines in the message are
	  replaced with <c>", "</c>, and whitespaces following
	  directly after newlines are removed. Note that newlines
	  added by the <c>template</c> parameter are not replaced.</p>
	<p>Default is <c>true</c>.</p>
      </item>
      <tag><c>legacy_header = boolen()</c></tag>
      <item>
	<p>If set to <c>true</c> a header field is added to
	  logger_formatter's part of <c>Metadata</c>. The value of
	  this field is a string similar to the header created by the
	  old <c>error_logger</c> event handlers. It can be included
	  in the log event by adding the
	  tuple <c>{logger_formatter,header}</c> to the template. See
	  section <seealso marker="#default_templates">Default
	  Templates</seealso> for more information.</p>
	<p>Default is <c>false</c>.</p>
      </item>
      <tag><c>report_cb = fun((</c><seealso marker="logger#type-report"><c>logger:report()</c></seealso><c>) -> {</c><seealso marker="stdlib:io#type-format"><c>io:format()</c></seealso><c>,[term()]})</c></tag>
      <item>
	<p>A report callback is used by the formatter to transform log
	  messages on report form to a format string and
	  arguments. The report callback can be specified in the
	  metadata for the log event. If no report callback exist in
	  metadata, <c>logger_formatter</c> will
	  use <seealso marker="logger#format_report-1">
	    <c>logger:format_report/1</c></seealso> as default
	  callback.</p>
	<p>If this configuration parameter is set, it replaces both
	  the default report callback, and any report callback found
	  in metadata. That is, all reports are converted by this
	  configured function.</p>
	<p>The value must be a function with arity 1,
	  returning <c>{Format,Args}</c>, and it will be called with a
	  report as only argument.</p>
      </item>
      <tag><c>template = </c><seealso marker="#type-template"><c>template()</c></seealso></tag>
      <item>
	<p>The template is a list of atoms, tuples and strings. The
	  atoms <c>level</c> or <c>msg</c>, are treated as
	  placeholders for the severity level and the log message,
	  repectively. Other atoms or tuples are interpreted as
	  placeholders for metadata, where atoms are expected to match
	  top level keys, and tuples represent paths to sub keys when
	  the metadata is a nested map. For example the
	  tuple <c>{key1,key2}</c> is replaced by the value of
	  the <c>key2</c> field in the nested map below. The
	  atom <c>key1</c> on its own is replaced by the complete
	  value of the <c>key1</c> field. The values are converted to
	  strings.</p>

<code>
#{key1=>#{key2=>my_value,
          ...}
  ...}</code>

        <p>Strings in the template are printed literally.</p>
	<p>The default template differs depending on the values
	  of <c>legacy_header</c>
	  and <c>single_line</c>. See <seealso marker="#default_templates">Default
	  Templates</seealso> for more information</p>
      </item>
      <tag><c>utc = boolean()</c></tag>
      <item>
	<p>If set to <c>true</c>, all dates are displayed in Universal
	  Coordinated Time.</p>
	<p>Default is <c>false</c>.</p>
      </item>
    </taglist>
  </section>

  <section>
    <marker id="default_templates"/>
    <title>Default templates</title>

    <p>The default value for the <c>template</c> configuration
      parameter depends on the value of <c>single_line</c>
      and <c>legacy_header</c> as follows.</p>

    <p>The log event used in the examples is:</p>
    <code>
?LOG_ERROR("name: ~p~nexit_reason: ~p",[my_reg_name,"It crashed"])</code>

    <taglist>
      <tag><c>legacy_header=true</c></tag>
      <item>
	<p>Default template: <c>[{logger_formatter,header},"\n",msg,"\n"]</c></p>

	<p>Example log entry:</p>
	<code>
=ERROR REPORT==== 29-Dec-2017::13:30:51.245123 ===
name: my_reg_name
exit_reason: "It crashed"</code>

	<p>Notice that all eight levels might occur in the heading,
	  not only <c>ERROR</c>, <c>WARNING</c> or <c>INFO</c> as the
	  old <c>error_logger</c> produced. And microseconds are
	  added at the end of the timestamp.</p>
      </item>

      <tag><c>single_line=true</c></tag>
      <item>
	<p>Default template: <c>[time," ",level,": ",msg,"\n"]</c></p>

	<p>Example log entry:</p>
	<code>2017-12-29 13:31:49.640317 error: name: my_reg_name, exit_reason: "It crashed"</code>
      </item>

      <tag><c>legacy_header=false, single_line=false</c></tag>
      <item>
	<p>Default template: <c>[time," ",level,":\n",msg,"\n"]</c></p>

	<p>Example log entry:</p>
	<code>
2017-12-29 13:32:25.191925 error:
name: my_reg_name
exit_reason: "It crashed"</code>
      </item>
    </taglist>
  </section>

  <datatypes>
    <datatype>
      <name name="template"/>
      <desc>
      </desc>
    </datatype>
  </datatypes>

  <funcs>
    <func>
      <name name="format" arity="2"/>
      <fsummary>Formats the given message.</fsummary>
      <desc>
	<p>This the formatter callback function to be called from
	  handlers. The log event is processed as follows:</p>
	<list>
	  <item>If the message is on report form, it is converted to
	    <c>{Format,Args}</c> by calling the report
	    callback.</item>
	  <item>The size is limited according to the values of
	    configuration parameters <c>chars_limit</c>
	    and <c>depth</c>. Notice that this does not apply to
	    messages on string form.</item>
	  <item>The full log entry is composed according to
	    the <c>template</c>.</item>
	  <item>If the final string is too long, it is truncated
	    according to the value of configuration
	    parameter <c>max_size</c>.</item>
	</list>
      </desc>
    </func>

  </funcs>

</erlref>


